/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelaEditor;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Panel;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author tiago
 */
public class JanelaEditorHtml extends javax.swing.JFrame {

    /**
     * Creates new form JanelaEditor
     */
    public JanelaEditorHtml() {
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sistemaFicheiros = new javax.swing.JFileChooser();
        jSeparator5 = new javax.swing.JSeparator();
        barraTools = new javax.swing.JToolBar();
        btnNovo = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        btnAbrir = new javax.swing.JButton();
        btnGravar = new javax.swing.JButton();
        btnFechar = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnPreVisualizar = new javax.swing.JButton();
        separador = new javax.swing.JTabbedPane();
        barraMenu = new javax.swing.JMenuBar();
        menuFicheiros = new javax.swing.JMenu();
        itemNovo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        itemAbrir = new javax.swing.JMenuItem();
        itemGravar = new javax.swing.JMenuItem();
        itemFechar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        itemSair = new javax.swing.JMenuItem();
        menuFerramentas = new javax.swing.JMenu();
        itemPreVisualizar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("HTML5 Editor Pro");
        setMinimumSize(new java.awt.Dimension(450, 350));
        setPreferredSize(new java.awt.Dimension(850, 650));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        barraTools.setRollover(true);

        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/New document.png"))); // NOI18N
        btnNovo.setToolTipText("Novo");
        btnNovo.setFocusable(false);
        btnNovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNovo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });
        barraTools.add(btnNovo);
        barraTools.add(jSeparator6);

        btnAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Folder.png"))); // NOI18N
        btnAbrir.setToolTipText("Abrir");
        btnAbrir.setFocusable(false);
        btnAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        barraTools.add(btnAbrir);

        btnGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save.png"))); // NOI18N
        btnGravar.setToolTipText("Gravar");
        btnGravar.setEnabled(false);
        btnGravar.setFocusable(false);
        btnGravar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGravar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });
        barraTools.add(btnGravar);

        btnFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Erase.png"))); // NOI18N
        btnFechar.setToolTipText("Fechar");
        btnFechar.setEnabled(false);
        btnFechar.setFocusable(false);
        btnFechar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFechar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });
        barraTools.add(btnFechar);
        barraTools.add(jSeparator4);

        btnPreVisualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/View.png"))); // NOI18N
        btnPreVisualizar.setToolTipText("Pre-Visualizar");
        btnPreVisualizar.setEnabled(false);
        btnPreVisualizar.setFocusable(false);
        btnPreVisualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPreVisualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPreVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreVisualizarActionPerformed(evt);
            }
        });
        barraTools.add(btnPreVisualizar);

        getContentPane().add(barraTools, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(separador, java.awt.BorderLayout.CENTER);

        menuFicheiros.setText("Ficheiros");
        menuFicheiros.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N

        itemNovo.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        itemNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/New document.png"))); // NOI18N
        itemNovo.setText("Novo");
        itemNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNovoActionPerformed(evt);
            }
        });
        menuFicheiros.add(itemNovo);
        menuFicheiros.add(jSeparator1);

        itemAbrir.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        itemAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Folder.png"))); // NOI18N
        itemAbrir.setText("Abrir");
        itemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAbrirActionPerformed(evt);
            }
        });
        menuFicheiros.add(itemAbrir);

        itemGravar.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        itemGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save.png"))); // NOI18N
        itemGravar.setText("Gravar");
        itemGravar.setEnabled(false);
        itemGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGravarActionPerformed(evt);
            }
        });
        menuFicheiros.add(itemGravar);

        itemFechar.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        itemFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Erase.png"))); // NOI18N
        itemFechar.setText("Fechar");
        itemFechar.setEnabled(false);
        itemFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFecharActionPerformed(evt);
            }
        });
        menuFicheiros.add(itemFechar);
        menuFicheiros.add(jSeparator2);

        itemSair.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        itemSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Turn off.png"))); // NOI18N
        itemSair.setText("Sair");
        itemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSairActionPerformed(evt);
            }
        });
        menuFicheiros.add(itemSair);

        barraMenu.add(menuFicheiros);

        menuFerramentas.setText("Ferramentas");
        menuFerramentas.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N

        itemPreVisualizar.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        itemPreVisualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/View.png"))); // NOI18N
        itemPreVisualizar.setText("Pre-Visualizar");
        itemPreVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPreVisualizarActionPerformed(evt);
            }
        });
        menuFerramentas.add(itemPreVisualizar);

        barraMenu.add(menuFerramentas);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        abrirSeparador();
        enableBtn(true);
    }//GEN-LAST:event_btnNovoActionPerformed

    private void itemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSairActionPerformed
        sair();
    }//GEN-LAST:event_itemSairActionPerformed

    private void itemPreVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPreVisualizarActionPerformed
        preVisualizar();
    }//GEN-LAST:event_itemPreVisualizarActionPerformed

    private void btnPreVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreVisualizarActionPerformed
        preVisualizar();
    }//GEN-LAST:event_btnPreVisualizarActionPerformed

    private void itemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAbrirActionPerformed
        abrirFicheiro();
    }//GEN-LAST:event_itemAbrirActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        abrirFicheiro();
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void itemNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNovoActionPerformed
        abrirSeparador();
        enableBtn(true);
    }//GEN-LAST:event_itemNovoActionPerformed

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        fecharSeparador();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void itemFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFecharActionPerformed
        fecharSeparador();
    }//GEN-LAST:event_itemFecharActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        gravarFicheiro();
    }//GEN-LAST:event_btnGravarActionPerformed

    private void itemGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGravarActionPerformed
        gravarFicheiro();
    }//GEN-LAST:event_itemGravarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        sair();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaEditorHtml.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaEditorHtml.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaEditorHtml.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaEditorHtml.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaEditorHtml().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JToolBar barraTools;
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnPreVisualizar;
    private javax.swing.JMenuItem itemAbrir;
    private javax.swing.JMenuItem itemFechar;
    private javax.swing.JMenuItem itemGravar;
    private javax.swing.JMenuItem itemNovo;
    private javax.swing.JMenuItem itemPreVisualizar;
    private javax.swing.JMenuItem itemSair;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JMenu menuFerramentas;
    private javax.swing.JMenu menuFicheiros;
    private javax.swing.JTabbedPane separador;
    private javax.swing.JFileChooser sistemaFicheiros;
    // End of variables declaration//GEN-END:variables

    private FileNameExtensionFilter filterHtml = new FileNameExtensionFilter("Html files", "html");

    private int cont = 1;

    // METODOS ------------------------------
    //---------------------------------------
    public void enableBtn(boolean TF) {
        itemGravar.setEnabled(TF);
        btnGravar.setEnabled(TF);
        itemFechar.setEnabled(TF);
        btnFechar.setEnabled(TF);
        itemPreVisualizar.setEnabled(TF);
        btnPreVisualizar.setEnabled(TF);
    }

    private void sair() {
        int size = separador.getTabCount() - 1;

        if (size < 0) {
            if (JOptionPane.showConfirmDialog(rootPane, "Tem a certeza que quer Sair", "Sair", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        } else {
            if (JOptionPane.showConfirmDialog(rootPane, "Quer gravar antes de sair", "Gravar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                gravarFicheiroAoSair();
                System.exit(0);
            } else if (JOptionPane.showConfirmDialog(rootPane, "Tem a certeza que quer Sair", "Sair", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
        disableBtn();
    }

    private void preVisualizar() {
        // extrair scrollpane que se encontra no separador seleccionado
        JScrollPane scrollAux = (JScrollPane) separador.getComponentAt(separador.getSelectedIndex());

        // extrair textarea que se encontra no scrollpane extraido anteriormente 
        //(conteudo armazenado na caixaTextoAux)
        JTextArea caixaTextoAux = (JTextArea) scrollAux.getViewport().getView();

        JanelaPreVisualizar jPreVis = new JanelaPreVisualizar(this, true, caixaTextoAux.getText());

        jPreVis.setVisible(true);
    }

    private void abrirFicheiro() {
        sistemaFicheiros.setFileFilter(filterHtml);
        sistemaFicheiros.setMultiSelectionEnabled(true);

        if (sistemaFicheiros.showOpenDialog(this) == JOptionPane.OK_OPTION) {

            try {
                String linhaLida;
                File[] titulo = sistemaFicheiros.getSelectedFiles();

                for (int i = 0; i < titulo.length; i++) {
                    JTextArea caixaTexto = new JTextArea();
                    JScrollPane scrollAbrir = new JScrollPane(caixaTexto);

                    FileReader ficheiro = new FileReader(titulo[i]);

                    caixaTexto.setName(titulo[i].getAbsolutePath());

                    BufferedReader entradaDados = new BufferedReader(ficheiro);

                    while ((linhaLida = entradaDados.readLine()) != null) {
                        caixaTexto.append(linhaLida + "\n");
                    }
                    entradaDados.close();
                    ficheiro.close();

                    separador.addTab(String.valueOf(titulo[i].getName()), scrollAbrir);
                    separador.setSelectedComponent(scrollAbrir);
                }

            } catch (IOException erro) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao abrir ficheiro!\n" + erro, "Abrir Ficheiro", JOptionPane.ERROR_MESSAGE);
            }
        }
        enableBtn(true);
        disableBtn();
    }

    private void gravarFicheiro() {

        // extrair scrollpane que se encontra no separador seleccionado
        JScrollPane scrollAux = (JScrollPane) separador.getComponentAt(separador.getSelectedIndex());
        // extrair textarea que se encontra no scrollpane extraido anteriormente 
        //(conteudo armazenado na caixaTextoAux)
        JTextArea caixaTextoAux = (JTextArea) scrollAux.getViewport().getView();

        String caminho = caixaTextoAux.getName();

        if (caminho.equals("novo")) {
            if (sistemaFicheiros.showSaveDialog(this) == JOptionPane.OK_OPTION) {
                try {

                    String nomeFicheiro = sistemaFicheiros.getSelectedFile().toString();
                    String extensao = nomeFicheiro.substring(nomeFicheiro.length() - 5).toLowerCase();
                    if (!extensao.equals(".html")) {
                        nomeFicheiro += ".html";
                    }

                    FileWriter ficheiro = new FileWriter(nomeFicheiro);
                    BufferedWriter saidaDados = new BufferedWriter(ficheiro);

                    saidaDados.write(caixaTextoAux.getText());
                    saidaDados.close();
                    ficheiro.close();

                } catch (IOException erro) {
                    JOptionPane.showMessageDialog(rootPane, "Erro ao guardar ficheiro!\n" + erro, "Abrir Ficheiro", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            gravarAutomaticamente(caixaTextoAux, caminho);
        }

    }

    private void gravarFicheiroAoSair() {

        int size = separador.getTabCount();

        separador.setSelectedIndex(0);
        if (size == 0) {
            gravarFicheiro();
        } else {
            for (int i = 0; i < size; i++) {
                // extrair scrollpane que se encontra no separador seleccionado
                JScrollPane scrollAux = (JScrollPane) separador.getComponentAt(separador.getSelectedIndex());
                // extrair textarea que se encontra no scrollpane extraido anteriormente 
                //(conteudo armazenado na caixaTextoAux)
                JTextArea caixaTextoAux = (JTextArea) scrollAux.getViewport().getView();

                String caminho = caixaTextoAux.getName();

                if (caminho.equals("novo")) {
                    gravarFicheiro();
                } else {
                    gravarAutomaticamente(caixaTextoAux, caminho);
                }
                separador.remove(separador.getSelectedComponent());
            }
        }
    }

    private void gravarAutomaticamente(JTextArea caixaTextoAux, String caminho) {
        try {
            FileWriter ficheiro = new FileWriter(caminho);
            BufferedWriter saidaDados = new BufferedWriter(ficheiro);

            saidaDados.write(caixaTextoAux.getText());
            saidaDados.close();
            ficheiro.close();
        } catch (IOException erro) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao guardar ficheiro Automatico!\n" + erro, "Abrir Ficheiro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void abrirSeparador() {
        JTextArea caixaTextoPreText = new JTextArea();
        JScrollPane scroll = new JScrollPane(caixaTextoPreText);

        caixaTextoPreText.setText("<!DOCTYPE html>\n"
                + "<html>\n"
                + "    <head>\n"
                + "         <meta charset='utf-8'>\n"
                + "         <title>Sem Título</title>\n"
                + "    </head>\n"
                + "    <body>\n"
                + "         <h1>Título da Página</h1>\n"
                + "    </body>\n"
                + "</html>");

        caixaTextoPreText.setName("novo");
        separador.addTab(String.valueOf("Document " + cont++), scroll);
        separador.setSelectedComponent(scroll);
    }

    public void fecharSeparador() {

        int op = JOptionPane.showConfirmDialog(rootPane, "Quer gravar antes de fechar", "Gravar", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (JOptionPane.YES_OPTION == op) {
            gravarFicheiro();
            separador.remove(separador.getSelectedComponent());
        } else if (JOptionPane.NO_OPTION == op) {
            separador.remove(separador.getSelectedComponent());
        }

        disableBtn();
    }

    private void disableBtn() {
        int size = separador.getTabCount() - 1;

        if (size < 0) {
            enableBtn(false);
        }
    }

}
